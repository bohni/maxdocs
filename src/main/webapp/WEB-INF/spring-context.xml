<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2011-2013, Team maxdocs.org

    All rights reserved.

    Redistribution and use in source and binary forms, with or without modification, are permitted provided
    that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
       following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
       the following disclaimer in the documentation and/or other materials provided with the distribution.
    3. The name of the author may not be used to endorse or promote products derived from this software
       without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
    NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Properties -->
	<context:property-placeholder location="classpath:maxdocs.properties" />

	<!-- Cache -->
	<bean
		id="cacheManager"
		class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					name="htmlPages" />
			</set>
		</property>
	</bean>

	<cache:advice
		id="htmlCacheAdvice"
		cache-manager="cacheManager">
		<cache:caching cache="htmlPages">
			<cache:cacheable
				method="getHtmlPage"
				key="#pagePath" />
			<cache:cache-evict
				method="delete"
				key="#pagePath"
				all-entries="false" />
			<cache:cache-evict
				method="rename"
				key="#pagePath"
				all-entries="false" />
			<cache:cache-evict
				method="save"
				key="#newPage.pagePath"
				all-entries="false" />
		</cache:caching>
	</cache:advice>

	<!-- apply the cacheable behavior to interfaces -->
	<aop:config>
		<aop:advisor
			advice-ref="htmlCacheAdvice"
			pointcut="execution(* org.maxdocs.engine.MaxDocs.*(..))" />
	</aop:config>

	<!-- Storage -->
	<bean
		id="storageImpl"
		class="org.maxdocs.storage.FileStorage">
		<constructor-arg value="${maxdocs.contentPath}" />
		<constructor-arg value="${maxdocs.versionFolder}" />
	</bean>

	<!-- Markup parser -->
	<context:component-scan base-package="org.maxdocs.parser" />

	<bean
		id="mediawiki"
		class="org.eclipse.mylyn.wikitext.mediawiki.core.MediaWikiLanguage">
		<property
			name="internalLinkPattern"
			value="{0}" />
	</bean>
	<bean
		id="creole"
		class="org.eclipse.mylyn.wikitext.creole.core.CreoleLanguage" />

	<bean
		id="markupLanguageFactory"
		class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
		<property
			name="serviceLocatorInterface"
			value="org.maxdocs.parser.MarkupLanguageFactory" />
	</bean>

	<bean
		id="parserImpl"
		class="org.maxdocs.parser.MarkupParserImpl">
		<property
			name="markupLanguageFactory"
			ref="markupLanguageFactory" />
	</bean>

	<!-- Maxdocs engine -->
	<bean
		id="maxDocs"
		class="org.maxdocs.engine.MaxDocsImpl">
		<property
			name="storage"
			ref="storageImpl" />
		<property
			name="parser"
			ref="parserImpl" />
	</bean>

	<!--  Template -->
	<bean
		id="templateName"
		class="java.lang.String"
		scope="session">
		<constructor-arg value="${maxdocs.templateName}" />
	</bean>

	<bean
		id="breadcrumbsCount"
		scope="singleton"
		class="java.lang.Integer">
		<constructor-arg value="${maxdocs.breadcrumbsCount}" />
	</bean>
	
	<!-- Apache Shiro Security -->
	<bean
		id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property
			name="securityManager"
			ref="securityManager" />
    <!-- override these for application-specific URLs if you like: -->
    <!-- <property name="loginUrl" value="/login.jsp"/>
    <property name="successUrl" value="/home.jsp"/>
    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
    <!-- defined will be automatically acquired and available via its beanName in chain        -->
    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
    <!-- <property name="filters">
        <util:map>
            <entry key="anAlias" value-ref="someFilter"/>
        </util:map>
    </property> -->
		<property name="filterChainDefinitions">
			<value>
			</value>
		</property>
	</bean>
<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
<!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
<!-- <bean id="someFilter" class="..."/> -->

	<bean
		id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
		<property name="realms">
			<list>
				<ref bean="iniRealm" />
				<ref bean="maxdocsRealm" />
			</list>
		</property>
    <!-- By default the servlet container sessions will be used.  Uncomment this line
         to use shiro's native sessions (see the JavaDoc for more): -->
    <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean
		id="lifecycleBeanPostProcessor"
		class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean
		id="iniRealm"
		class="org.apache.shiro.realm.text.IniRealm">
		<constructor-arg value="classpath:maxdocs-security.ini" />
	</bean>

	<bean
		id="maxdocsRealm"
		class="org.apache.shiro.realm.text.IniRealm">
		<constructor-arg value="classpath:maxdocs-security-anonymous.ini" />
	</bean>

<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
<!-- the lifecycleBeanProcessor has run: -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property
			name="securityManager"
			ref="securityManager" />
	</bean>
</beans>

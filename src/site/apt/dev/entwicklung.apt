~~
~~ Copyright (c) 2011-2013, Team maxdocs.org
~~
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without modification, are permitted provided
~~ that the following conditions are met:
~~
~~ 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
~~    following disclaimer.
~~ 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
~~    the following disclaimer in the documentation and/or other materials provided with the distribution.
~~ 3. The name of the author may not be used to endorse or promote products derived from this software
~~    without specific prior written permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
~~ DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
~~ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
~~ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
~~ ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
~~

 ------
 MaxDocs Entwicklung
 ------
 Team maxdocs.org
 ------
2013-01-11

~~ Auf dieser Seite wird der Entwicklungsprozess erklärt: Umgebung installieren, Projekt einrichten, Vorgaben

Entwicklung

* Allgemeines

 Die Entwicklung läuft auf github.com, der Entwicklungsbranch ist master.

 Es wird ein Branching Modell verwendet, das sich an das {{{http://nvie.com/posts/a-successful-git-branching-model/}Branching Modell}}
 von Vincent Driessen anlehnt.

 Bei MaxDocs sind die folgenden Branches definiert:

	* master entspricht dem develop branch in Vincents Modell 

	* releases entspricht dem master branch in Vincents Modell.

* Entwicklungsumgebung installieren und konfigurieren

** Eclipse

 Bei der Entwicklung kommt die {{{http://www.eclipse.org/downloads/}Eclipse IDE for Java EE Developers}}
 zum Einsatz.

 Zusätzlich werden noch die folgenden Plugins benötigt,  die über den Eclipse Marketplace 
 direkt in der IDE installiert werden können:

		* EGit - Git Team Provider
		
			* Eclipse EGit

			* Eclipse JGit

		* GitHub Mylyn Connector

			* Eclipse EGit Mylyn GitHub Feature

		* Maven Integration for Eclipse WTP
		
			* m2e - Maven Integration for Eclipse

			* m2e connector for mavenarchiver pom properties

			* m2e-wtp - Maven Integration for WTP (Incubation)

		* Sonar

			* Sonar Java Analyser

			* Sonar m2e Connector

			* Sonar Mylyn Connector

 Die folgenden Plugins aus dem Marketplace sind optional:

		* optional: EclEmma Java Code Coverage

			* EclEmma Java Code Coverage

		* optional: EasyShell

			* Easy Shell Feature

		* optional: FindBugs Eclipse Plugin

			* FindBugs Feature

		* optional: Spring Tool Suite (STS) for Eclipse ...
		
			* Spring IDE Autowire Extension (optional)

			* Spring IDE core (required)

			* Spring IDE Maven Support (optional)

			* Spring IDE Mylyn Integration (optional)

 Dazu können noch folgende zwei Plugins installiert werden, die nicht über den Marketplace erhältlich
 sind:

		* optional: {{{http://apteditor.sourceforge.net/}APT Editor}}\
		  (Dieses Plugin muss manuell installiert werden. Einfach das JAR-file in das dropins-Verzeichnis
		  von Eclipse kopieren)

		* optional: {{{http://http://pmd.sourceforge.net/}PMD}}\
		  (Dieses Plugin  kann über "Help > Install New Software..." installiert werden.
		  Dazu wird als Update Site dir URL {{http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site}}
		  verwendet.

			* PMD Plug-in

 Damit der Sourcecode ein einheitliches Format hat, müssen in Eclipse folgende Preferences zwingend
 angepasst werden:

	* General > Workspace

		* Text file encoding: UTF-8

		* New text file line delimiter: Unix

	* General > Editors > Text Editors

		* Insert spaces for tabs: deaktiviert

	* Java > Code Style > Clean Up: {{{./cleanup.xml}cleanup.xml}} muss importiert werden

	* Java > Code Style > Code Templates: {{{./codetemplates.xml}codetemplates.xml}} muss importiert werden

	* Java > Code Style > Formatter: {{{./codeformatter.xml}codeformatter.xml}} muss importiert werden

	* Web > CSS Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* Web > CSS Files > Editor

		* Line Width: 110

		* Indent using tabs: ausgewählt

	* Web > HTML Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* Web > HTML Files > Editor

		* Line Width: 110

		* Indent using tabs: ausgewählt

	* Web > JSP Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* XML > XML Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* XML > XML Files > Editor

		* Line Width: 110

		* Split multiple attributes each on new line: true

		* Indent using tabs: ausgewählt

** Maven

 Für den Standbau wird bei MaxDocs {{{http://maven.apache.org}Apache Maven}} verwendet.

** Git

 Die Versionierung erfolgt mit {{{http://www.git-scm.org}Git}} auf {{{http://www.github.com/bohni/maxdocs}github.com}}.

 Nach der Installation von Git müssen noch folgende Einstellungen vorgenommen werden, natürlich mit
 entsprechend angepasstem Namen und E-Mail-Adresse. Besonders wichtig ist die Einstellung autocrlf,
 damit es nicht zu Komplikationen bei den Zeilenenden der Dateien kommt. 

		* git config --global user.name "John Doe"

		* git config --global user.email johndoe@example.com

		* Windows: git config --global core.autocrlf true

		* Mac/Unix : git config --global core.autocrlf input

* Projekt anlegen

 Das Projekt kann auf zwei Arten angelegt werden. Zum einen über die Command line, hier wird das
 Projekt in Eclipse importiert. Oder aber es wird gleich in Eclipse über den Wizard ein neues Projekt 
 aus dem git Repository heraus angelegt.

** Command line

	* Verzeichnis anlegen

	* git clone https://github.com/bohni/maxdocs.git (read-only)

	* git clone https://<user>@github.com/bohni/maxdocs.git (writable)

	* Eclipse: Import existing project

** Eclipse

	* File/New/Git/Git Repository

	* Paste Repository Path or URI: https://github.com/bohni/maxdocs.git

	* Git Repository View: Import projects

* Vorgaben

 Bei der Programmierung sind die folgende Vorgaben zu beachten

	* Alle Dateien müssen in UTF-8 gespeichert werden

	* Das Zeilenende ist im Unix-Format zu halten

	* Die Einrückungen erfolgen grundsätzlich mit Tabulatoren, nicht mit Leerzeichen

	* Es müssen die bereitgestellten Formatter und Templates verwendet werden.

	* Es wird immer die durch den Compiler generierte serialVersionUID verwendet, d.h. im Sourcecode
	  wird keine entsprechende Konstante verwendet. Falls die Warnings in Eclipse stören, können diese
	  unter  Java > Compiler > Errors/Warnings > Potential programming problems ausgeschaltet werden.

* Tipps und Tricks

	* Auf Updates der Abhängigkeiten und Plugins prüfen: {{{http://mojo.codehaus.org/versions-maven-plugin/}Versions Maven Plugin}}

		* Plguins: mvn versions:display-plugin-updates

		* Abhängigkeiten: mvn versions:display-dependency-updates

	* License header in Dateien

		* prüfen: mvn validate license:check

		* generieren: mvn validate license:format

	* {{{https://github.com/github/maven-plugins}Github Plugins}}

* nützliche Links

	* {{{http://nvie.com/posts/a-successful-git-branching-model/}Branching Model}}

	* {{{http://blog.code-adept.com/2008/01/25/unit-testing-jsp-custom-tags/}Unit Testing Custom Tags}}

	* {{{http://wiki.apache.org/tomcat/FAQ/CharacterEncoding}UTF-8 encoding mit Apache Tomcat}}

	* {{{http://ahoehma.wordpress.com/2010/05/25/export-maven-war-artifact-as-runnable-jetty-package/}Assembly als Standalone}}

	* {{{http://shaierera.blogspot.de/2012/11/lucene-facets-part-1.html}Lucene Facets, Part 1}}

	* {{{http://blog.akquinet.de/2012/04/12/maven-sites-reloaded/}Maven Sites – Reloaded}}

	* {{{http://longair.net/blog/2009/04/16/git-fetch-and-merge/}git: fetch and merge, don’t pull}}

	* {{{http://www.mail-archive.com/shiro-user@incubator.apache.org/msg00742.html}Shiro: Anonymous user with permissions}}

	* {{{http://www.sonarsource.org/effective-code-review-with-sonar/}Code Reviews mit Sonar}}

	* Modern CSS Layouts:
	  {{{http://coding.smashingmagazine.com/2009/10/26/modern-css-layouts-the-essential-characteristics/}Part 1 - The Essential Characteristics}},
	  {{{http://coding.smashingmagazine.com/2010/05/06/modern-css-layouts-part-2-the-essential-techniques/}Part 2 - The Essential Techniques}}


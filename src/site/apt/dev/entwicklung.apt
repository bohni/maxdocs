 ------
 MaxDocs Entwicklung
 ------
 Team maxdocs.org
 ------
 2013-10-13

~~ Auf dieser Seite wird der Entwicklungsprozess erklärt: Umgebung installieren, Projekt einrichten, Vorgaben

Entwicklung

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Allgemeines

 Die Entwicklung läuft auf github.com, der Entwicklungsbranch ist master.

 Es wird ein Branching Modell verwendet, das sich an das {{{http://nvie.com/posts/a-successful-git-branching-model/}Branching Modell}}
 von Vincent Driessen anlehnt.

 Bei MaxDocs sind die folgenden Branches definiert:

	* master entspricht dem develop branch in Vincents Modell 

	* releases entspricht dem master branch in Vincents Modell.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Entwicklungsumgebung installieren und konfigurieren

** Eclipse

 Bei der Entwicklung kommt die {{{http://www.eclipse.org/downloads/}Eclipse IDE for Java EE Developers}}
 zum Einsatz.

 Zusätzlich werden noch die folgenden Plugins benötigt,  die über den Eclipse Marketplace 
 direkt in der IDE installiert werden können (je nach Eclipse-Version sind sie bereits dabei).
 
 Für die Versionsverwaltung wird {{{http://git-scm.org}Git}} verwendet.

		* EGit - Git Team Provider
		
			* Eclipse EGit

			* Eclipse JGit

 Das Build-Verfahren beruht auf {{{http://maven.apache.org}Apache Maven}}.

		* Maven Integration for Eclipse WTP
		
			* m2e - Maven Integration for Eclipse

			* m2e connector for mavenarchiver pom properties

			* m2e-wtp - Maven Integration for WTP (Incubation)

 Der Issuetracker von {{{https://github.com/bohni/maxdocs/issues}Github}} kann sich in Mylyn integrieren.

		* GitHub Mylyn Connector

			* Eclipse EGit Mylyn GitHub Feature

 Die folgenden Plugins aus dem Marketplace sind optional:

 Die Code Qualität wird mit {{{http://www.sonarqube.org/}SonarQube}} geprüft. Auch SonarQube
 kann sich in Eclipse integrieren.

		* optional: Sonar

			* Sonar Java Analyser

			* Sonar m2e Connector

			* Sonar Mylyn Connector

 Mit {{{http://basti1302.github.io/startexplorer/}StartExplorer}} kann eine Shell oder ein Explorer mit Rechtsklick auf den Tree geöffnet werden.

		* optional: StartExplorer

			* StartExplorer Feature

 Code Coverage der Unit Tests kann mit {{{http://www.eclemma.org/}EclEmma}} geprüft werden

		* optional: EclEmma Java Code Coverage

			* EclEmma Java Code Coverage

 {{{http://findbugs.sourceforge.net/}FindBugs}} zur statischen Code Analyse, da es auch in SonarQube verwendet wird.

		* optional: FindBugs Eclipse Plugin

			* FindBugs Feature

 Die {{{http://spring.io/tools/sts}Spring Tool Suite}} integriert Spring in Eclipse

		* optional: Spring Tool Suite (STS) for Eclipse ...
		
			* Spring IDE Autowire Extension (optional)

			* Spring IDE core (required)

			* Spring IDE Maven Support (optional)

			* Spring IDE Mylyn Integration (optional)

 Dazu können noch folgende zwei Plugins installiert werden, die nicht über den Marketplace erhältlich
 sind:
 
 {{{http://pmd.sourceforge.net/}PMD}} zur statischen Code Analyse, da es auch in SonarQube verwendet wird.

		* optional: PMD\
		  <Dieses Plugin  kann über "Help \> Install New Software..." installiert werden.\
		  Dazu wird als Update Site die URL {{http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site}}
		  verwendet.>

			* Pmd for Eclipse 4
			
				* PMD Plug-in

 Zur besseren Erstellung der {{{http://maven.apache.org/doxia/references/apt-format.html}APT-Dokumente}}
 für die Maven Site

		* optional: {{{http://maven.apache.org/doxia/doxia-ide/eclipse/}Apache Doxia Eclipse Editor Plugin}}\
		  <Dieses Plugin  kann über "Help \> Install New Software..." installiert werden.\
		  Dazu wird als Update Site die URL {{http://maven.apache.org/doxia/doxia-ide/eclipse/eclipse}}
		  verwendet.>

			* Apache Maven Doxia Editors
			
				* Doxia Editors Feature

 Damit der Sourcecode ein einheitliches Format hat, müssen in Eclipse folgende Preferences zwingend
 angepasst werden:

	* General > Workspace

		* Text file encoding: UTF-8

		* New text file line delimiter: Unix

	* General > Editors > Text Editors

		* Insert spaces for tabs: deaktiviert

	* Java > Code Style > Clean Up: {{{./cleanup.xml}cleanup.xml}} muss importiert werden

	* Java > Code Style > Code Templates: {{{./codetemplates.xml}codetemplates.xml}} muss importiert werden

	* Java > Code Style > Formatter: {{{./codeformatter.xml}codeformatter.xml}} muss importiert werden

	* Web > CSS Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* Web > CSS Files > Editor

		* Line Width: 110

		* Indent using tabs: ausgewählt

	* Web > HTML Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* Web > HTML Files > Editor

		* Line Width: 110

		* Indent using tabs: ausgewählt

	* Web > JSP Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* XML > XML Files

		* Encoding: ISO10646/Unicode(UTF-8)

	* XML > XML Files > Editor

		* Line Width: 110

		* Split multiple attributes each on new line: true

		* Indent using tabs: ausgewählt

** Maven

 Für den Standbau wird bei MaxDocs {{{http://maven.apache.org}Apache Maven}} verwendet.

** Git

 Die Versionierung erfolgt mit {{{http://www.git-scm.org}Git}} auf {{{http://www.github.com/bohni/maxdocs}github.com}}.

 Nach der Installation von Git müssen noch folgende Einstellungen vorgenommen werden, natürlich mit
 entsprechend angepasstem Namen und E-Mail-Adresse. Besonders wichtig ist die Einstellung autocrlf,
 damit es nicht zu Komplikationen bei den Zeilenenden der Dateien kommt. 

		* Username

------------------------------------------
> git config --global user.name "John Doe"
------------------------------------------

		* E-Mail-Adresse

------------------------------------------
> git config --global user.email johndoe@example.com
------------------------------------------

		* Zeilenende Windows

------------------------------------------
> git config --global core.autocrlf true
------------------------------------------


		* Zeilenende Mac/Unix 

------------------------------------------
> git config --global core.autocrlf input
------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Projekt anlegen

 Das Projekt kann auf zwei Arten angelegt werden. Zum einen über die Command line, hier wird das
 Projekt in Eclipse importiert. Oder aber es wird gleich in Eclipse über den Wizard ein neues Projekt 
 aus dem git Repository heraus angelegt.

** Command line

	* Verzeichnis anlegen

	* git clone https://github.com/bohni/maxdocs.git (read-only)

	* git clone https://<user>@github.com/bohni/maxdocs.git (writable)

	* Eclipse: Import existing project

** Eclipse

	* File/New/Git/Git Repository

	* Paste Repository Path or URI: https://github.com/bohni/maxdocs.git

	* Git Repository View: Import projects

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Vorgaben

 Bei der Programmierung sind die folgende Vorgaben zu beachten

	* Alle Dateien müssen in UTF-8 gespeichert werden

	* Das Zeilenende ist im Unix-Format zu halten

	* Die Einrückungen erfolgen grundsätzlich mit Tabulatoren, nicht mit Leerzeichen

	* Es müssen die bereitgestellten Formatter und Templates verwendet werden.

	* Es wird immer die durch den Compiler generierte serialVersionUID verwendet, d.h. im Sourcecode
	  wird keine entsprechende Konstante verwendet. Falls die Warnings in Eclipse stören, können diese
	  unter  Java > Compiler > Errors/Warnings > Potential programming problems ausgeschaltet werden.

	* Alle Dateien müssen den Lizenz-Header enthalten (thrid-party Dateien müssen excluded werden!).
	  Dieser kann auch über ein Maven-Goal erstellt werden:

		* Prüfen, welche Dateien einen falschen / keinen Header haben

------------------------------------------
> mvn validate license:check
------------------------------------------

		* Fehlende Header ergänzen / falsche Header korrigieren 

------------------------------------------
> mvn validate license:format
------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Tipps und Tricks

	* Versionen prüfen: {{{http://mojo.codehaus.org/versions-maven-plugin/}Versions Maven Plugin}}

		* Plugins: <<<mvn versions:display-plugin-updates>>>

		* Abhängigkeiten: <<<mvn versions:display-dependency-updates>>>
		
	* Dependencies prüfen: {{{http://maven.apache.org/plugins/maven-dependency-plugin/}Maven Dependency Plugin}}
	
		* Deklarierte/verwendete/unbenutze Dependencies: <<<mvn dependency:analyze>>>

		* DependencyManagement prüfen: <<<mvn dependency:analyze-dep-mgt>>>

	* License header in Dateien

		* prüfen: <<<mvn validate license:check>>>

		* generieren: <<<mvn validate license:format>>>

	* {{{https://github.com/github/maven-plugins}Github Plugins}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* nützliche Links

	* {{{http://nvie.com/posts/a-successful-git-branching-model/}Branching Model}}

	* {{{http://blog.code-adept.com/2008/01/25/unit-testing-jsp-custom-tags/}Unit Testing Custom Tags}}

	* {{{http://wiki.apache.org/tomcat/FAQ/CharacterEncoding}UTF-8 encoding mit Apache Tomcat}}

	* {{{http://ahoehma.wordpress.com/2010/05/25/export-maven-war-artifact-as-runnable-jetty-package/}Assembly als Standalone}}

	* {{{http://shaierera.blogspot.de/2012/11/lucene-facets-part-1.html}Lucene Facets, Part 1}}

	* {{{http://blog.akquinet.de/2012/04/12/maven-sites-reloaded/}Maven Sites – Reloaded}}

	* {{{http://longair.net/blog/2009/04/16/git-fetch-and-merge/}git: fetch and merge, don’t pull}}

	* {{{http://www.mail-archive.com/shiro-user@incubator.apache.org/msg00742.html}Shiro: Anonymous user with permissions}}

	* {{{http://www.sonarsource.org/effective-code-review-with-sonar/}Code Reviews mit Sonar}}

	* Modern CSS Layouts:
	
	  * {{{http://coding.smashingmagazine.com/2009/10/26/modern-css-layouts-the-essential-characteristics/}Part 1 - The Essential Characteristics}}
	  
	  * {{{http://coding.smashingmagazine.com/2010/05/06/modern-css-layouts-part-2-the-essential-techniques/}Part 2 - The Essential Techniques}}


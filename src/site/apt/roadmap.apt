~~
~~ Copyright (c) 2011-2013, Team maxdocs.org
~~
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without modification, are permitted provided
~~ that the following conditions are met:
~~
~~ 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
~~    following disclaimer.
~~ 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
~~    the following disclaimer in the documentation and/or other materials provided with the distribution.
~~ 3. The name of the author may not be used to endorse or promote products derived from this software
~~    without specific prior written permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
~~ DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
~~ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
~~ LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
~~ ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
~~

 ------
 MaxDocs Roadmap
 ------
 Team maxdocs.org
 ------
2013-01-06
 
Roadmap

 Auf dieser Seite werden die nächsten Milertones und die benötigten Features beschrieben.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Milestone M1

 In diesem Milestone soll eine erste Version von Maxdocs entstehen, mit der Seiten erstellt, 
 angezeigt, bearbeitet und gelöscht werden können.

 Es wird ein erstes rudimentäres Template erstellt, welches die benötigten Funktionen unterstützt.
 Dabei erfolgt die Anzeige grundsätzlich über CustomTags, welche die Daten zu Anzeige von der Engine
 holen.

 Das Datenmodell besteht aus "Seiten". Es gibt Seitenobjekte für die Seite mit dem Inhalt als Markup
 und es gibt Objekte mit dem fertig als HTML gerenderten Inhalt. 

 Es wird ein ServletFilter benötigt, der die Request entsprechend der URL filtert. Allen Aufrufe für 
 Seiten in Maxdocs  wird "/content" vorangestellt, damit dann das MaxdocsServlet den dispatchten 
 Request bearbeiten kann. Alle URLs, die mit "internal" beginnen, werden an das DefaultServlet 
 weitergeleitet (für css, Bilder, etc.) 
 
 Das MaxdocsServlet löst dann die entsprechende Verarbeitung in der Engine aus.
 
 Die Engine bietet die benötigte Funktionalitäten und liegt im Context der WebApplikation, so dass
 sie von allen beteiligten Komponenten erreichbar ist.


** Filter

 Der Filter leitet alle URLs, die mit "/internal" starten, an das DefaultServlet weiter.
 Allen URLs wird "/content" vorangestellt und die neue URL dispatched.

** Servlet

 Das Servlet bedient alle URLs, die mit "/content" beginnen. Dabei wird auch der Parameter "action"
 ausgewertet.

	* breadcrumbs\
	Die Breadcumbs werden als Strings (PagePath) in einem org.apache.commons.collections.buffer.CircularFifoBuffer
	erfasst. Dieser Buffer wird als Session-Attribut gespeichert. Die Anzahl der zu speichernden Pfade
	kann in der Konfig eingestellt werden. Per default werden die letzten 5 unterschiedlichen Pfade
	gespeichert.
	
	* delete\
	Berechtigungsprüfung, dann Löschen der übergebenen Seite durch die Engine veranlassen.
	
	* edit\
	Berechtigungsprüfung, dann notwendige Daten im Request ablegen und edit.jsp anzeigen.
	
	* save\
	Berechtigungsprüfung, dann die Daten übergebenen Daten auslesen und das erzeugte Seitenobjekt
	über die Engine speichern.
	
	* show\
	Berechtigungsprüfung, dann Anzeigen der übergebenen Seite
	
	* source\
	Berechtigungsprüfung, dann Anzeigen des Sourcecode der übergebenen Seite
	
** Engine

 Die Engine stellt die komplette Geschäftslogik zur Verfügung. 

	* delete\
	Löschen an Storgae delegieren
	
	* exists\
	Anfrage an Storage delegieren
	
	* getHtmlPage\
	MarkupPage über Storage laden, dann mit durch Parser in HTMLPage wandeln und zurück geben.
	
	* getMarkupPage\
	MarkupPage über Storage ladenund zurück geben.
	
	* save\
	Speichern an Storage delegieren

** FileStorage

 Der FileStorage ist die Default-Implementierung des Storage-Interfaces, der die Daten auf dem
 Dateisystem speichert.

	* delete\
	Übergebene Seite löschen: aktuelle und historisierte Daten, sowie aus Seitenmap
	
	* exists\
	Prüfen, ob Seite bereits vorhanden ist
	
	* load\
	Laden der aktuellen Version der Seite von Platte
	
	* save\
	Speichern der Seite auf Platte

** Parser

 Der Parser erzeugt aus den Markup-Daten das anzuzeigende HTML 

	* Anbindung\
	Der Parser wird mit Spring verwaltet. Mit der ServiceLocatorFactoryBean werden alle spezifischen
	ParserImplementierungen verfügbar gemacht.

** Taglib

 Die Taglib enthält alle JSP-Tags zur Anzeige der Daten. Dabei haben alle Tags das 
 styleClass- und das plain-Attribut. Das Attribut styleClass wird als html-Attribut class gerendert.
 Das plain-Attribut steuert, ob das entsprechende Tag den Text mit oder ohne HTML-Tags rendert. 

	* author\
	Gibt den Autor (hat die Seite erstellt) oder Editor (hat die Seite bearbeitet) der Seite aus.\
	Unterstütze Attribute:
	
		* styleClass: Default ist maxdocsAuthor
		
		* plain: Default ist false
	
		* type: author oder editor. Default ist author
		
	* breadcrumbs\
	Dieses Tag gibt die zuletzt besuchten Seiten als ul-Element aus.\
	Unterstütze Attribute:
	
		* styleClass: Default ist maxdocsBreadcrumbs
	
	* date\
	Dieses Tag gibt das Datum der Anlage oder der letzten Änderung aus, was über das Attribut type 
	gesteuert wird. Das Datumsformat wird über das Attribut format gesteuert, welches das Pattern
	im SimpleDateformat enthalten muss.\
	Unterstütze Attribute:
	
		* styleClass: Default ist maxdocsDate
		
		* plain: Default ist false
	
		* type: creation oder lastChange. Default ist lastChange
		
		* fromat: Pattern im SimpleDateFormat. Default ist yyyy-MM-dd HH:mm
	
	* insertPage\
	Dieses Tag erzeugt einen div-Container mit dem geparsten HTML der im name-Attribut angegebenen
	Seite.\
	Unterstütze Attribute:
	
		* styleClass: Default ist maxdocsInsertedPage
		
		* name: Name der einzufügenden Seite
	
	* markupLanguage\
	Dieses Tag gibt die Markupsprache aus, mit der diese Seite geschrieben wurde. Über das type-Attibut
	kann gesteuert werden, ob die Markupsprache der Seite als String (output) oder als select-Element
	(input) ausgegeben wird\
	Unterstütze Attribute:
	
		* styleClass: Default ist maxdocsMarkupLanguage
		
		* plain: Wird nur bei type output unterstützt. Default ist false
		
		* type: output oder input. Default ist output
	
	* noSuchPage\
	Mit diesem Tag kann Text ausgegeben werden, wenn die zu prüfende Seite nicht exisitert.\
	Unterstütze Attribute:
	
		* page: Name der Seite. Wenn nicht angegeben, wird der aktuelle Seitenname verwendet.
	
	* pageContent\
	
	* pageExists\
	Mit diesem Tag kann Text ausgegeben werden, wenn die zu prüfende Seite exisitert.\
	Unterstütze Attribute:
	
		* page: Name der Seite. Wenn nicht angegeben, wird der aktuelle Seitenname verwendet.
	
	* pageName\
	
	* pageSource\
	
	* pageVersion\
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Milestone M2

 Mit dem zweiten Meilenstein werden weitere Funktionen eingebaut, außerdem soll nun eine erste
 Implementierung der Security erfolgen.

** Servlet

	* login\
	Login des übergebenen Users

	* logout\
	Logout des angemeldeten Users

	* rename\
	Umbenennen der übergebenen Seite


** Engine

	* rename

	* tagcloud

	* links2me

** FileStorage

	* rename

	* tagcloud

** Parser

	* Creole vervollständigen

** Taglib

	* messages
	
	* tagCloud

** Security

	* Security-Konzept verfeinern:

	* Wie kann dynamisch auf Seitenbasis gesperrt werden?

	* Welche Rechte werden benötigt (View, Edit, Rename, Delete, Upload, etc.)

	* Wie können Rechte und Rollen getrennt werden? 

	* Wie wird Security konfiguriert?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Milestone M3

 Im dritten Meilenstein wird nun das Plugin-Konzept erarbeitet und implementiert.

** Plugins

** Blog

** Templates

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* weitere Themen

	* Dokumentation

		* Javadoc-Kommentare prüfen und vereinheitlichen.

		* Architektur dokumentieren.

		* Bereits implementierte Konzepte dokumentieren.

	* Unit Tests

		* Es sollten für den bestehenden Code alle nötigen Unit Tests erstellt werden.

	* Codereview

		* Auf den bisher erstellten Code muss ein Review durchgeführt werden.
		   Gegebenenfalls gefundende Punkte müssen überarbeitet werden.

	* Caching der Seiten

	* Save: Parsen und interne Links als Metadata speichern
	
	* Wikistart: 

		* Map1 pagePath -> Filename [String]

		* Map2 pagePath -> Links2Me [List]

		* List für RecentChanges (30 neuesten); evtl. über Lucene?
		
		* Map3 tag -> pagePath [List]	

	* Delete (MaxDocs Engine, FileStorage)

	* Rename (MaxDocs Engine, FileStorage)

	* Parser
	
		* Bestehende Parser erweitern/korrigieren

		* Weitere Markups
		
	* Load version (MaxDocs Engine, FileStorage)

	* Compare Versions (MaxDocs Engine)

	* Plugin-Konzept erstellen

	* Anhänge

	* Hook für Search und Statistik

	* Bilder

	* Gallery

	* I18n

	* +1 / Gefällt mir / ...
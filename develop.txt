TODO
- Storage ist Fleißarbeit
- Parser TextileJ muss analysiert werden: Verwenden? Selber machen?
- Editieren, Showsource, Attachments, Web-Handling
- Security konzeptionieren

===============================================================
Schnittstellen für Plugins/Providers/etc:
- Versionierung mit OSGi, damit Drittanbieter auf geänderte 
  Schnittstellen reagieren können?

===============================================================
Storage
http://wiki.apache.org/tomcat/FAQ/CharacterEncoding
- Alles immer als UTF-8 behandeln, unabhängig vom System.
- Storage liefert Linksliste für alle Seiten (wer verlink auf mich)
- Engine nutzt Linkliste für z.B. rename. Sie benutzt den Parser für
  geänderte Links und den Storage rein zum Speichern der geänderten Seiten. 
- Ursprungsversion beim Speichern prüfen, ob noch vorhanden oder bereits eine 
  neuere Version gespeichert ist.

===============================================================
FileStorageProvider
- alles unter einem User ist schlecht (Security)
- chmod 777 ist keine Lösung (Security)
- Problem 1: Entzippen als User, laufen als www -> Rechteprobleme
- Lösungsansatz: Binaries als "root", daten als www
                 Install anbieten -> Doku aus Jarfile lesen und 
                 als www schreiben
Alle Seiten werden auf dem Filesystem nur mit <lfdNr>.txt gespeichert.
Die Seiten enthalten der PagePath als Metadaten
Alle Seiten werden beim Start eingelesen in Liste/Map mit Zuordnung PagePath<->LfdNr

Versionierung erfolgt als <ContentFolder>/<VersionsFolder>/<LfdNr>/<Version>.txt

===============================================================
Wo wird entwickelt?
- GitHub?
- Heimserver? HTTP? SSH? Gitolite? Gitblit?
=> Entwicklung läuft vorerst auf Github bohni/maxdocs
- Wie ist das bei Github mit evtl. User maxdocs?

===============================================================
Parser
- Nur für Syntax, lässt Plugin Auszeichnung unverändert

unterstützte Markups:
* Creole [http://www.wikicreole.org/wiki/Creole1.0]
* Jspwiki [http://www.jspwiki.org/wiki/TextFormattingRules]
* Textile [http://textile.thresholdstate.com/] -> TextileJ
* Mediawiki [http://en.wikipedia.org/wiki/Help:Wiki_markup] -> TextileJ
weitere Markups:
* Confluence -> TextileJ
* Trac -> TextileJ
* Markdown [http://daringfireball.net/projects/markdown/]

===============================================================
Plugins
- verarbeiten bereits geparsten Content

===============================================================
Engine
- Lesen
- Parsen
- Ausliefern
- Änderungen speichern
- Suchindex updaten
- Referenzen aktualisieren (siehe Storage)
- Locking
- etc.
- zweimal Parser aufrufen:
  erster Aufruf für Syntax
  zweiter Aufruf für Plugins 

- Attachments:
  Muessen von unserem Servlet verarbeitet werden wg. PrettyURL.
  exists() darf nicht nur true, sondern muss auch den Mimetype liefern (oder 
  zwei Methoden)

===============================================================
SearchProvider
 - Lucene / Solr

===============================================================
Templates
- Default mit Alles (Yaml)
- University: Simple als Start für Template-Entwickler
- Retro mit Bunt und Anim-Gif
- Dreckstool: grün-schwarz

- Pagetypes: Page (Wikiseite), Blog (Blog Homepage), Blogentry (Blogeintrag)
  - Page: Eine Wikiseite, die im "Wikistyle" angezeigt wird
  - Blog: Eine Wikiseite, die im Style "Blog" (z.B. mit Kalender) angezeigt wird. 
    Hier wird per Plugin die Stelle angegeben, wo die x letzten Blogeinträge kommen.
  - Blogentry: Ein Blogeintrag, der im Style "Blog" angezeigt wird.

- "AbstractPage" als Vorlage für die einzelnen Seiten - sitemesh?

===============================================================
Gallery
- Gallery nimmt als Attribut einen Pfad und bereitet daraus ein
  Album auf. Ggf. mit Ordnern zum navigieren
- Bilddarstellung mit Lightbox

===============================================================
Image
- inline, wenn als Link auf Attachment
  Aufgrund MimeType oder Endung?

===============================================================
Attachments
- MimeType?
- Endungen?

===============================================================
Sprache
- Wer gibt Sprache vor? Browser? Wiki-Besitzer? Server?
Browser: Ein Wiki mit rein deutschen Inhalten bekommt I18n-Wiki-Texte (Formulare, Buttons, etc)
Wiki-Besitzer: Alle Ausländer werden "ausgeschlossen"
Server: geht gar nicht, da normalerweise keinerlei Einfluss

- Lösungsansätze:
Browser: 
Nicht unterstützte Sprachen -> Default Locale
User kann Locale wählen (Dropdown), die dann im Cookie gespeichert wird.
Wiki verwendet nur Cookie-Locale (ggf. beim ersten Aufruf aus Browser-Locale übernommen)
Wiki-Besitzer könnte bei Installation die unterstützen Sprachen auswählen und nicht gewünschte weglassen

Wiki-Besitzer:
Wiki-Besitzer könnte bei Installation die unterstützen Sprachen auswählen und so auch mehrere unterstützen
Config: default-Locale einstellen und Browser-Locale erlauben(ja/nein)

